<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSGi.NET</name>
    </assembly>
    <members>
        <member name="T:OSGi.NET.Core.BundleStateConst">
            <summary>
            Bunble模块状态
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.UNINSTALLED">
            <summary>
            已卸载
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.INSTALLED">
            <summary>
            已安装
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.RESOLVED">
            <summary>
            已装载
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.STARTING">
            <summary>
            正在启动
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.STOPPING">
            <summary>
            正在停止
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleStateConst.ACTIVE">
            <summary>
            已激活
            </summary>
        </member>
        <member name="T:OSGi.NET.Core.BundleConst">
            <summary>
            Bunde常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_LIBS_DIRECTORY_NAME">
            <summary>
            依赖库目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_REQUIRED_BUNDLE_VERSION">
            <summary>
            bundle版本
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_ACTIVATOR">
            <summary>
            bundle激活器
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_SYMBOLIC_NAME">
            <summary>
            bundle符号名称
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_VERSION">
            <summary>
            bundle版本
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_NAME">
            <summary>
            bundle名称
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_VENDOR">
            <summary>
            bundle厂商信息
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleConst.BUNDLE_MANIFEST_REQUIRE_BUNDLE">
            <summary>
            bundle依赖bundle
            </summary>
        </member>
        <member name="T:OSGi.NET.Core.BundleContext">
            <summary>
            表示模块上下文，暴露了内核的操作
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.framework">
            <summary>
            框架内核
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.bundle">
            <summary>
            上下文关联的当前模块
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.bundleListenerList">
            <summary>
            当前模块的Bundle监听器列表
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.extensionListenerList">
            <summary>
            当前模块的Extension监听器列表
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.serviceListenerList">
            <summary>
            当前模块的服务监听器列表
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.serviceReferenceList">
            <summary>
            当前模块注册的服务引用
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.BundleContext.bundleUsingServiceReferenceList">
            <summary>
            当前模块引用的其他服务
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.#ctor(OSGi.NET.Core.Root.IFramework,OSGi.NET.Core.IBundle)">
            <summary>
            构造
            </summary>
            <param name="framework">框架内核</param>
            <param name="bundle">模块</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.AddBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            添加一个Bundle监听器实例
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RemoveBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            移除一个Bundle监听器实例
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.AddExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            添加一个Extension监听器实例
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RemoveExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            移除一个Extension监听器实例
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.AddServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            添加一个服务监听器实例
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RemoveServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            移除一个服务监听器
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RegisterService(System.String[],System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实现了多个服务接口的服务对象注册
            </summary>
            <param name="contracts">服务约束数组</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性，在查找服务时用于过滤服务</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RegisterService(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实现了一个服务接口的服务对象注册
            </summary>
            <param name="contract">服务约束</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.RegisterService``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            以泛型的方式注册服务对象
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.UnRegisterService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消注册公开的服务对象
            </summary>
            <param name="serviceReference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReference``1">
            <summary>
            以泛型方式根据服务约束类型获取服务
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReference(System.String)">
            <summary>
            根据服务约束获取服务(根据注册顺序获取第一个服务引用)
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReferences``1">
            <summary>
            以泛型方式根据服务约束类型获取服务引用列表
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReferences``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            以泛型方式根据服务约束类型获取服务引用列表
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReferences(System.String)">
            <summary>
            根据服务约束获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetServiceReferences(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据服务约束及服务属性获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <param name="properties">服务属性</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetUsingBundles(OSGi.NET.Service.IServiceReference)">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <param name="reference">服务引用</param>
            <returns>正在使用服务的Bundle列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetService(OSGi.NET.Service.IServiceReference)">
            <summary>
            根据服务引用获取对应的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetService``1(OSGi.NET.Service.IServiceReference)">
            <summary>
            根据服务引用获取对应的服务实例(强类型版本)
            </summary>
            <param name="reference">服务引用</param>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetService``1">
            <summary>
            获取对应的服务实例(强类型版本)
            </summary>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.UnGetService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消调用指定服务引用的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.InstallBundle(System.String)">
            <summary>
            安装指定路径下的Bundle模块
            </summary>
            <param name="location">Bundle文件全路径</param>
            <returns>已安装的Bundle实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetBundles">
            <summary>
            获取所有Bundle模块
            </summary>
            <returns>Bundle模块列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetBundle">
            <summary>
            获取当前上下文关联的Bundle模块
            </summary>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetBundle(System.Int32)">
            <summary>
            根据序号获取已装载的指定Bundle
            </summary>
            <param name="index">序号</param>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.GetBundle(System.String)">
            <summary>
            根据程序集名称获取已装载的指定Bundle
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="E:OSGi.NET.Core.BundleContext.ExtensionChanged">
            <summary>
            扩展变更事件
            </summary>
        </member>
        <member name="E:OSGi.NET.Core.BundleContext.ServiceChanged">
            <summary>
            服务变更事件
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.FireExtensionChanged(OSGi.NET.Core.IBundle,OSGi.NET.Event.ExtensionEventArgs)">
            <summary>
            触发扩展变更事件
            </summary>
            <param name="bundle">引发的模块</param>
            <param name="extensionEventArgs">扩展事件参数</param>
        </member>
        <member name="M:OSGi.NET.Core.BundleContext.FireServiceChanged(OSGi.NET.Core.IBundle,OSGi.NET.Event.ServiceEventArgs)">
            <summary>
            触发服务变更事件
            </summary>
            <param name="bundle">引发的模块</param>
            <param name="serviceEventArgs">服务事件参数</param>
        </member>
        <member name="T:OSGi.NET.Core.Bundle">
            <summary>
            Bundle表示由内核创建的一个插件
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.framework">
            <summary>
            framwork
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleContext">
            <summary>
            bundle上下文
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleDirectoryPath">
            <summary>
            Bundle路径
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleAssemblyFileName">
            <summary>
            Bundle文件名称
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.manifestData">
            <summary>
            Bundle 配置信息
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleAssemblyFullName">
            <summary>
            bundle程序集全名
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleSymbolicName">
            <summary>
            bundle符号名称
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleVersion">
            <summary>
            bundle版本
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.lastModified">
            <summary>
            最后一次修改时间
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.metaDataDictionary">
            <summary>
            bundle元数据字典
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleRefAssemblyDict">
            <summary>
            当前bundle引用程序集
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleRefDefinitionDict">
            <summary>
            当前bundle引用程序集定义
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.extensionPoints">
            <summary>
            扩展点
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.extensionDatas">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleAssembly">
            <summary>
            bundle程序集
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.activatorClass">
            <summary>
            bundle启动器类型
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.bundleActivator">
            <summary>
            bundle启动器实例
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.requiredBundleList">
            <summary>
            bundle依赖bundles集合
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Bundle.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.#ctor(OSGi.NET.Core.Root.IFramework,System.String,System.Xml.XmlNode)">
            <summary>
            Bundle构造
            </summary>
            <param name="framework">框架实例</param>
            <param name="bundleDirectoryPath">Bundle路径</param>
            <param name="bundleConfigData">Bundle配置节点</param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.Init">
            <summary>
            初始化Bundle，读取相关信息
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.LoadMetaData(System.String)">
            <summary>
            读取元数据信息
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.RemoveAllRefAssembly">
            <summary>
            清除当前Bundle引用程序集
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleFolderName">
            <summary>
            获取当前Bundle目录
            </summary>
            <returns></returns>
        </member>
        <!-- 对于成员“M:OSGi.NET.Core.Bundle.Start”忽略有格式错误的 XML 注释 -->
        <member name="M:OSGi.NET.Core.Bundle.LoadExtensions">
            <summary>
            初始化扩展信息
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.Resolve">
            <summary>
            装载Bundle
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.LoadRequiredBundle">
            <summary>
            1.加载依赖Bundle
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.LoadAssemblys">
            <summary>
            2.加载所需的所有程序集
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.LoadActivator">
            <summary>
            3.读取Activator
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.LoadAssemblyFromLibDir(System.String)">
            <summary>
            从LIB目录加载程序集并返回新的程序集名称
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns>程序集定义</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.MarkAssembleyVersion(Mono.Cecil.AssemblyNameReference)">
            <summary>
            重名程序集生成唯一版本号
            </summary>
            <param name="assemblyNameReference">程序集Name引用</param>
            <returns>新版本</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetRequireBundleList">
            <summary>
            获取依赖Bundle信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.ParseRequireBundleVersion(System.String,System.String@,System.String@)">
            <summary>
            获取依赖Bundle及版本
            </summary>
            <param name="requireBundleString"></param>
            <param name="requireBundleName"></param>
            <param name="requireBundleVersionString"></param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleFromRequiredBundles(System.String)">
            <summary>
            根据符号名称从已装载的Bundle列表获取依赖Bundle
            </summary>
            <param name="bundleName"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleLibsDirectoryName">
            <summary>
            得到Bundle依赖库的目录名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.AddRefAssembly(System.String,System.Reflection.Assembly,Mono.Cecil.AssemblyDefinition)">
            <summary>
            添加引用程序集
            </summary>
            <param name="assemblyFullName"></param>
            <param name="assemblyDefinition"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleRefAssembly(System.String)">
            <summary>
            获取当前Bundle已经引用的程序集
            </summary>
            <param name="assemblyFullName"></param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleRefDefinition(System.String)">
            <summary>
            获取当前Bundle已经引用的程序集定义
            </summary>
            <param name="assemblyFullName"></param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.UnLoadExtensions">
            <summary>
            卸载扩展点数据
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.UnInstall">
            <summary>
            卸载组件
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.Update(System.String)">
            <summary>
            指定路径更新当前Bundle
            </summary>
            <param name="zipFile">更新的Bundle路径</param>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleContext">
            <summary>
            获取当前Bundle上下文对象
            </summary>
            <returns>Bundle上下文对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetState">
            <summary>
            获取当前Bundle状态
            </summary>
            <returns>Bundle状态</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetVersion">
            <summary>
            获取当前Bundle版本信息
            </summary>
            <returns>Bundle版本信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetSymbolicName">
            <summary>
            获取当前Bundle符号名称
            </summary>
            <returns>Bundle符号名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleAssemblyFullName">
            <summary>
            获取当前Bundle程序集全名
            </summary>
            <returns>Bundle程序集全名</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetManifest">
            <summary>
            获取当前Bundle程序集清单数据
            </summary>
            <returns>Bundle程序清单数据</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleDirectoryPath">
            <summary>
            获取当前Bundle目录
            </summary>
            <returns>Bundle目录</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleAssemblyFileName">
            <summary>
            获取当前Bundle程序集文件名称
            </summary>
            <returns>Bundle程序集文件名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleStartLevel">
            <summary>
            获取当前Bundle启动级别
            </summary>
            <returns>Bundle启动级别</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetBundleManifestData">
            <summary>
            获取模块清单数据
            </summary>
            <returns>清单数据节点</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetExtensionPoints">
            <summary>
            获取当前Bundle扩展点
            </summary>
            <returns>扩展点列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetExtensionDatas">
            <summary>
            获取当前Bundle扩展的扩展数据
            </summary>
            <returns>扩展数据列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Bundle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Core.Root.FrameworkFactory">
            <summary>
            框架内核构造工厂
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.FrameworkFactory.CreateFramework">
            <summary>
            创建一个框架内核实例
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.FrameworkFactory.CreateFramework(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionPoint})">
            <summary>
            创建一个框架内核实例，扩展点支持
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.FrameworkFactory.CreateFramework(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionData})">
            <summary>
            创建一个框架内核实例，扩展数据支持
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="T:OSGi.NET.Core.Root.IFrameworkFactory">
            <summary>
            框架内核构造工厂
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkFactory.CreateFramework">
            <summary>
            创建一个框架内核实例
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkFactory.CreateFramework(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionPoint})">
            <summary>
            创建一个框架内核实例,扩展点支持
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkFactory.CreateFramework(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionData})">
            <summary>
            创建一个框架内核实例,扩展数据支持
            </summary>
            <returns>框架内核实例</returns>
        </member>
        <member name="T:OSGi.NET.Core.Root.IFrameworkInstaller">
            <summary>
            框架内核安装器接口
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkInstaller.Install(System.String)">
            <summary>
            安装指定Bundle模块
            </summary>
            <param name="zipFile">Bundle文件全路径</param>
            <returns>已安装的Bundle对象实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkInstaller.UnInstall(OSGi.NET.Core.IBundle)">
            <summary>
            卸载指定Bundle模块
            </summary>
            <param name="bundle">Bundle实例对象</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkInstaller.Delete(OSGi.NET.Core.IBundle)">
            <summary>
            删除指定Bundle模块
            </summary>
            <param name="bundle">Bundle实例对象</param>
        </member>
        <member name="T:OSGi.NET.Core.Root.IFrameworkListener">
            <summary>
            框架内核监听器接口
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.AddBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            添加一个Bundle监听器
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.RemoveBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            移除一个Bundle监听器
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.AddExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            添加一个Extension监听器
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.RemoveExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            移除一个Extension监听器
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.AddServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            添加一个服务监听器
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkListener.RemoveServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            移除一个服务监听器
            </summary>
            <param name="listener">服务监听器</param>
        </member>
        <member name="T:OSGi.NET.Core.Root.IFrameworkService">
            <summary>
            框架内核服务接口
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.RegisterService(OSGi.NET.Core.IBundleContext,System.String[],System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            注册一个公开的服务对象
            </summary>
            <param name="bundleContext">Bundle上下文</param>
            <param name="contracts">服务约束</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.UnRegisterService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消注册公开的服务对象
            </summary>
            <param name="serviceReference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.GetServiceReference(System.String)">
            <summary>
            根据服务约束获取服务引用
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.GetUsingBundles(OSGi.NET.Service.IServiceReference)">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <param name="reference">服务引用</param>
            <returns>正在使用服务的Bundle列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.GetService(OSGi.NET.Service.IServiceReference,OSGi.NET.Core.IBundle)">
            <summary>
            根据服务引用获取对应的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <param name="bundle">调用服务的Bundle</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.UnGetService(OSGi.NET.Service.IServiceReference,OSGi.NET.Core.IBundle)">
            <summary>
            取消调用指定服务引用的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <param name="bundle">调用服务的Bundle</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.GetServiceReferences(System.String)">
            <summary>
            通过服务约束获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFrameworkService.GetServiceReferences(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            通过服务约束和服务属性获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <param name="properties">服务属性</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="T:OSGi.NET.Core.Root.Framework">
            <summary>
            框架内核，内核也作为一个Bundle，用来启动其他Bundle组件
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.FRAMEWORK_LOCK_FILE">
            <summary>
            框架锁,避免多实例启动
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.log">
            <summary>
            日志对象
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.bundleContext">
            <summary>
            Bundle上下文对象
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.bundlesDirectoryPath">
            <summary>
            Bundle目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.shareLibsDirectoryPath">
            <summary>
            共享程序集目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.bundlesUninstallPath">
            <summary>
            Bundle卸载存储目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.bundleList">
            <summary>
            所有插件包
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.extensionPoints">
            <summary>
            扩展点
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.extensionDatas">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.bundleListenerList">
            <summary>
            bundle监听器集合
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.extensionListenerList">
            <summary>
            Extension监听器集合
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.serviceListenerList">
            <summary>
            服务监听器集合
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.serviceReferenceDictionary">
            <summary>
            已注册的契约服务
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.usingServiceBundleDict">
            <summary>
            引用服务的模块
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.metaDataDictionary">
            <summary>
            Framework元数据字典
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.frameworkAssemblyFullName">
            <summary>
            framework程序集全名
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.frameworkSymbolicName">
            <summary>
            framework符号名称
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.frameworkVersion">
            <summary>
            framework版本
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.lockFileStream">
            <summary>
            框架锁文件流
            </summary>
        </member>
        <member name="F:OSGi.NET.Core.Root.Framework.state">
            <summary>
            状态，内核默认状态已装载
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.#ctor">
            <summary>
            内核构造
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.#ctor(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionPoint})">
            <summary>
            扩展点构造重载
            </summary>
            <param name="extensionPoints"></param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.#ctor(System.Collections.Generic.IList{OSGi.NET.Extension.ExtensionData})">
            <summary>
            扩展数据构造重载
            </summary>
            <param name="extensionDatas"></param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.LoadMetaData">
            <summary>
            读取元数据信息
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.ReadConfig">
            <summary>
            读取配置信息
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.LoadShareAssemblys">
            <summary>
            从共享程序集LIB目录和根目录中配置项加载程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.LoadShareAssemblyByReflect(System.String)">
            <summary>
            通过反射加载程序集
            </summary>
            <param name="assemblyFileName"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.DomainAssemblyInsertShareLib">
            <summary>
            将domain程序集插入共享程序集
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.DiscoverBundles">
            <summary>
            搜索发现Bundles
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Install(System.String)">
            <summary>
            安装指定Bundle模块
            </summary>
            <param name="zipFile">Bundle文件全路径</param>
            <returns>已安装的Bundle对象实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.UnInstall">
            <summary>
            卸载当前Bundle
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.UnInstall(OSGi.NET.Core.IBundle)">
            <summary>
            卸载指定Bundle模块
            </summary>
            <param name="bundle">Bundle实例对象</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Delete(OSGi.NET.Core.IBundle)">
            <summary>
            删除指定Bundle模块，默认实现备份至配置目录
            </summary>
            <param name="bundle">Bundle实例对象</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.Update(System.String)">
            <summary>
            指定路径更新当前Bundle
            </summary>
            <param name="zipFile">更新的Bundle路径</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleContext">
            <summary>
            获取当前Bundle上下文对象
            </summary>
            <returns>Bundle上下文对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetVersion">
            <summary>
            获取当前Bundle版本信息
            </summary>
            <returns>Bundle版本信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetSymbolicName">
            <summary>
            获取当前Bundle符号名称
            </summary>
            <returns>Bundle符号名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleAssemblyFullName">
            <summary>
            获取当前Bundle程序集全名
            </summary>
            <returns>Bundle程序集全名</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetManifest">
            <summary>
            获取当前Bundle程序集清单数据
            </summary>
            <returns>Bundle程序清单数据</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundles">
            <summary>
            获取所有Bundle模块
            </summary>
            <returns>所有已装载Bundle列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetState">
            <summary>
            获取当前Bundle状态
            </summary>
            <returns>Bundle状态</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleAssemblyFileName">
            <summary>
            获取当前Bundle程序集文件名称
            </summary>
            <returns>Bundle程序集文件名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleStartLevel">
            <summary>
            获取当前Bundle启动级别
            </summary>
            <returns>Bundle启动级别</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleDirectoryPath">
            <summary>
            获取当前Bundle目录
            </summary>
            <returns>Bundle目录</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetExtensionPoints">
            <summary>
            获取当前Bundle扩展点
            </summary>
            <returns>扩展点列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetExtensionDatas">
            <summary>
            获取当前Bundle扩展的扩展点数据
            </summary>
            <returns>扩展点数据列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetBundleManifestData">
            <summary>
            获取模块清单数据
            </summary>
            <returns>清单数据节点</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.AddBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            添加一个Bundle监听器
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.RemoveBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            移除一个Bundle监听器
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.FireBundleEvent(OSGi.NET.Event.BundleEventArgs)">
            <summary>
            触发Bundle状态变更事件
            </summary>
            <param name="bundleEvent">Bundle事件参数</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.AddExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            添加一个Extension监听器
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.RemoveExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            移除一个Extension监听器
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.FireExtensionEvent(OSGi.NET.Event.ExtensionEventArgs)">
            <summary>
            触发Extension变更事件
            </summary>
            <param name="extensionEvent">Extension事件参数</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.AddServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            添加一个服务监听器
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.RemoveServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            移除一个服务监听器
            </summary>
            <param name="listener">服务监听器</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.FireServiceEvent(OSGi.NET.Event.ServiceEventArgs)">
            <summary>
            触发服务变更事件
            </summary>
            <param name="serviceEvent">服务事件参数</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.RegisterService(OSGi.NET.Core.IBundleContext,System.String[],System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            注册一个公开的服务对象
            </summary>
            <param name="context">Bundle上下文</param>
            <param name="contracts">服务约束</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.UnRegisterService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消注册公开的服务对象
            </summary>
            <param name="serviceReference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetServiceReferences(System.String)">
            <summary>
            通过服务约束获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetServiceReferences(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            通过服务约束和服务属性获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <param name="properties">服务属性</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetServiceReference(System.String)">
            <summary>
            根据服务约束获取服务引用
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetUsingBundles(OSGi.NET.Service.IServiceReference)">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <param name="reference">服务引用</param>
            <returns>正在使用服务的Bundle列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.GetService(OSGi.NET.Service.IServiceReference,OSGi.NET.Core.IBundle)">
            <summary>
            根据服务引用获取对应的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <param name="bundle">调用服务的Bundle</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.Root.Framework.UnGetService(OSGi.NET.Service.IServiceReference,OSGi.NET.Core.IBundle)">
            <summary>
            取消调用指定服务引用的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <param name="bundle">调用服务的Bundle</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:OSGi.NET.Core.Root.IFramework">
            <summary>
            框架内核，内核也作为一个Bundle，用来启动其他Bundle组件
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFramework.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.Root.IFramework.GetBundles">
            <summary>
            获取所有Bundle模块
            </summary>
            <returns>所有已装载Bundle列表</returns>
        </member>
        <member name="T:OSGi.NET.Core.IBundle">
            <summary>
            Bundle表示由内核创建的一个插件
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetState">
            <summary>
            获取当前Bundle状态
            </summary>
            <returns>Bundle状态</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetVersion">
            <summary>
            获取当前Bundle版本信息
            </summary>
            <returns>Bundle版本信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetSymbolicName">
            <summary>
            获取当前Bundle符号名称
            </summary>
            <returns>Bundle符号名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleAssemblyFullName">
            <summary>
            获取当前Bundle程序集全名
            </summary>
            <returns>Bundle程序集全名</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetManifest">
            <summary>
            获取当前Bundle程序集清单数据
            </summary>
            <returns>Bundle程序清单数据</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleContext">
            <summary>
            获取当前Bundle上下文对象
            </summary>
            <returns>Bundle上下文对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetExtensionPoints">
            <summary>
            获取当前Bundle扩展点
            </summary>
            <returns>扩展点列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetExtensionDatas">
            <summary>
            获取当前Bundle扩展的扩展数据
            </summary>
            <returns>扩展数据列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleDirectoryPath">
            <summary>
            获取当前Bundle目录
            </summary>
            <returns>Bundle目录</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleAssemblyFileName">
            <summary>
            获取当前Bundle程序集文件名称
            </summary>
            <returns>Bundle程序集文件名称</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleManifestData">
            <summary>
            获取模块清单数据
            </summary>
            <returns>清单数据节点</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.GetBundleStartLevel">
            <summary>
            获取当前Bundle启动级别
            </summary>
            <returns>Bundle启动级别</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.Update(System.String)">
            <summary>
            指定路径更新当前Bundle
            </summary>
            <param name="zipFile">更新的Bundle路径</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundle.UnInstall">
            <summary>
            卸载当前Bundle
            </summary>
        </member>
        <member name="T:OSGi.NET.Core.IBundleActivator">
            <summary>
            Bundle激活器
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.IBundleActivator.Start(OSGi.NET.Core.IBundleContext)">
            <summary>
            激活器启动
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleActivator.Stop(OSGi.NET.Core.IBundleContext)">
            <summary>
            激活器停止
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:OSGi.NET.Core.IBundleContext">
            <summary>
            表示模块上下文，暴露了内核的操作
            </summary>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetBundle">
            <summary>
            获取当前上下文关联的Bundle模块
            </summary>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetBundle(System.Int32)">
            <summary>
            根据序号获取已装载的指定Bundle
            </summary>
            <param name="index">序号</param>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetBundle(System.String)">
            <summary>
            根据程序集名称获取已装载的指定Bundle
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetBundles">
            <summary>
            获取所有Bundle模块
            </summary>
            <returns>Bundle模块列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.InstallBundle(System.String)">
            <summary>
            安装指定路径下的Bundle模块
            </summary>
            <param name="location">Bundle文件全路径</param>
            <returns>已安装的Bundle实例</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.AddBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            添加一个Bundle监听器实例
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RemoveBundleListener(OSGi.NET.Listener.IBundleListener)">
            <summary>
            移除一个Bundle监听器实例
            </summary>
            <param name="listener">Bundle监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.AddExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            添加一个Extension监听器实例
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RemoveExtensionListener(OSGi.NET.Listener.IExtensionListener)">
            <summary>
            移除一个Extension监听器实例
            </summary>
            <param name="listener">Extension监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.AddServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            添加一个服务监听器实例
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RemoveServiceListener(OSGi.NET.Listener.IServiceListener)">
            <summary>
            移除一个服务监听器
            </summary>
            <param name="listener">服务监听器实例</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RegisterService(System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实现了一个服务接口的服务对象注册
            </summary>
            <param name="contract">服务约束</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RegisterService(System.String[],System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            实现了多个服务接口的服务对象注册
            </summary>
            <param name="contracts">服务约束数组</param>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.RegisterService``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            以泛型的方式注册服务对象
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <param name="service">服务对象</param>
            <param name="properties">服务属性</param>
            <returns>服务注册信息</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.UnRegisterService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消注册公开的服务对象
            </summary>
            <param name="serviceReference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReference(System.String)">
            <summary>
            根据服务约束获取服务(根据注册顺序获取第一个服务引用)
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReferences(System.String)">
            <summary>
            根据服务约束获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReferences(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            根据服务约束及服务属性获取服务引用列表
            </summary>
            <param name="contract">服务约束</param>
            <param name="properties">服务属性</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReference``1">
            <summary>
            以泛型方式根据服务约束类型获取服务
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReferences``1">
            <summary>
            以泛型方式根据服务约束类型获取服务引用列表
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetServiceReferences``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            以泛型方式根据服务约束类型获取服务引用列表
            </summary>
            <typeparam name="T">服务约束类型</typeparam>
            <param name="properties">服务属性</param>
            <returns>服务引用列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetService(OSGi.NET.Service.IServiceReference)">
            <summary>
            根据服务引用获取对应的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetService``1">
            <summary>
            获取服务实例(强类型版本)
            </summary>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetService``1(OSGi.NET.Service.IServiceReference)">
            <summary>
            根据服务引用获取对应的服务实例(强类型版本)
            </summary>
            <param name="reference">服务引用</param>
            <returns>服务对象</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.GetUsingBundles(OSGi.NET.Service.IServiceReference)">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <param name="reference">服务引用</param>
            <returns>正在使用服务的Bundle列表</returns>
        </member>
        <member name="M:OSGi.NET.Core.IBundleContext.UnGetService(OSGi.NET.Service.IServiceReference)">
            <summary>
            取消调用指定服务引用的服务实例
            </summary>
            <param name="reference">服务引用</param>
            <returns>是否成功</returns>
        </member>
        <member name="E:OSGi.NET.Core.IBundleContext.ExtensionChanged">
            <summary>
            扩展点变更事件
            </summary>
        </member>
        <member name="E:OSGi.NET.Core.IBundleContext.ServiceChanged">
            <summary>
            服务变更事件
            </summary>
        </member>
        <member name="T:OSGi.NET.Event.BundleEventArgs">
            <summary>
            Bundle事件参数
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.INSTALLED">
            <summary>
            已安装
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.STARTED">
            <summary>
            已启动
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.STOPPED">
            <summary>
            已停止
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.RESOLVED">
            <summary>
            已装载
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.STARTING">
            <summary>
            启动中
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.STOPPING">
            <summary>
            暂停中
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.BundleEventArgs.bundle">
            <summary>
            模块
            </summary>
        </member>
        <member name="M:OSGi.NET.Event.BundleEventArgs.#ctor(System.Int32,OSGi.NET.Core.IBundle)">
            <summary>
            Bundle事件参数
            </summary>
            <param name="state">状态</param>
            <param name="bundle">模块</param>
        </member>
        <member name="M:OSGi.NET.Event.BundleEventArgs.GetBundle">
            <summary>
            获取Bundle对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Event.BundleEventArgs.GetState">
            <summary>
            获取Bundle状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Event.ExtensionEventArgs">
            <summary>
            扩展事件参数
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ExtensionEventArgs.LOAD">
            <summary>
            加载扩展
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ExtensionEventArgs.UNLOAD">
            <summary>
            卸载扩展
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ExtensionEventArgs.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ExtensionEventArgs.extensionPoint">
            <summary>
            扩展点
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ExtensionEventArgs.extensionData">
            <summary>
            扩展点数据
            </summary>
        </member>
        <member name="M:OSGi.NET.Event.ExtensionEventArgs.#ctor(System.Int32,OSGi.NET.Extension.ExtensionPoint,OSGi.NET.Extension.ExtensionData)">
            <summary>
            服务事件参数
            </summary>
            <param name="state">状态</param>
            <param name="extensionPoint">扩展点</param>
            <param name="extensionData">扩展点数据</param>
        </member>
        <member name="M:OSGi.NET.Event.ExtensionEventArgs.GetState">
            <summary>
            扩展点数据加载状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Event.ExtensionEventArgs.GetExtensionPoint">
            <summary>
            获取扩展点
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Event.ExtensionEventArgs.GetExtensionData">
            <summary>
            获取扩展点数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Event.IFrameworkFireEvent">
            <summary>
            内核触发事件接口
            </summary>
        </member>
        <member name="M:OSGi.NET.Event.IFrameworkFireEvent.FireServiceEvent(OSGi.NET.Event.ServiceEventArgs)">
            <summary>
            触发服务变更事件
            </summary>
            <param name="serviceEvent">服务事件参数</param>
        </member>
        <member name="M:OSGi.NET.Event.IFrameworkFireEvent.FireBundleEvent(OSGi.NET.Event.BundleEventArgs)">
            <summary>
            触发Bundle状态变更事件
            </summary>
            <param name="bundleEvent">Bundle事件参数</param>
        </member>
        <member name="M:OSGi.NET.Event.IFrameworkFireEvent.FireExtensionEvent(OSGi.NET.Event.ExtensionEventArgs)">
            <summary>
            触发Extension变更事件
            </summary>
            <param name="extensionEvent">Extension事件参数</param>
        </member>
        <member name="T:OSGi.NET.Event.ServiceEventArgs">
            <summary>
            服务事件参数
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ServiceEventArgs.REGISTERED">
            <summary>
            注册服务
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ServiceEventArgs.UNREGISTERING">
            <summary>
            取消注册
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ServiceEventArgs.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ServiceEventArgs.contracts">
            <summary>
            服务约束
            </summary>
        </member>
        <member name="F:OSGi.NET.Event.ServiceEventArgs.reference">
            <summary>
            服务引用
            </summary>
        </member>
        <member name="M:OSGi.NET.Event.ServiceEventArgs.#ctor(System.Int32,System.String[],OSGi.NET.Service.IServiceReference)">
            <summary>
            服务事件参数
            </summary>
            <param name="state">服务状态</param>
            <param name="contracts">服务约束</param>
            <param name="reference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Event.ServiceEventArgs.GetServiceReference">
            <summary>
            获取服务引用
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Event.ServiceEventArgs.GetSercieContracts">
            <summary>
            获取服务约束数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Event.ServiceEventArgs.GetState">
            <summary>
            获取服务变更状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Event.IContextFireEvent">
            <summary>
            模块上下文触发事件接口
            </summary>
        </member>
        <member name="M:OSGi.NET.Event.IContextFireEvent.FireExtensionChanged(OSGi.NET.Core.IBundle,OSGi.NET.Event.ExtensionEventArgs)">
            <summary>
            触发扩展变更事件
            </summary>
            <param name="bundle">引发的模块</param>
            <param name="extensionEventArgs">扩展事件参数</param>
        </member>
        <member name="M:OSGi.NET.Event.IContextFireEvent.FireServiceChanged(OSGi.NET.Core.IBundle,OSGi.NET.Event.ServiceEventArgs)">
            <summary>
            触发服务变更事件
            </summary>
            <param name="bundle">引发的模块</param>
            <param name="serviceEventArgs">服务事件参数</param>
        </member>
        <member name="T:OSGi.NET.Extension.ExtensionData">
            <summary>
            扩展数据实体
            </summary>
        </member>
        <member name="P:OSGi.NET.Extension.ExtensionData.Name">
            <summary>
            扩展点名称
            </summary>
        </member>
        <member name="P:OSGi.NET.Extension.ExtensionData.ExtensionList">
            <summary>
            扩展数据节点集合
            </summary>
        </member>
        <member name="P:OSGi.NET.Extension.ExtensionData.Owner">
            <summary>
            拥有Bundle
            </summary>
        </member>
        <member name="T:OSGi.NET.Extension.ExtensionPoint">
            <summary>
            扩展点实体
            </summary>
        </member>
        <member name="P:OSGi.NET.Extension.ExtensionPoint.Name">
            <summary>
            扩展点名称
            </summary>
        </member>
        <member name="P:OSGi.NET.Extension.ExtensionPoint.Owner">
            <summary>
            拥有Bundle
            </summary>
        </member>
        <member name="T:OSGi.NET.Listener.IBundleListener">
            <summary>
            Bundle状态监听器
            </summary>
        </member>
        <member name="M:OSGi.NET.Listener.IBundleListener.BundleChanged(OSGi.NET.Event.BundleEventArgs)">
            <summary>
            Bundle状态变更
            </summary>
            <param name="e">Bundle事件参数</param>
        </member>
        <member name="T:OSGi.NET.Listener.IExtensionListener">
            <summary>
            Bundle扩展点监听器
            </summary>
        </member>
        <member name="M:OSGi.NET.Listener.IExtensionListener.ExtensionChanged(OSGi.NET.Event.ExtensionEventArgs)">
            <summary>
            Bundle扩展点变更
            </summary>
            <param name="e">扩展点事件参数</param>
        </member>
        <member name="T:OSGi.NET.Listener.IServiceListener">
            <summary>
            服务状态监听器
            </summary>
        </member>
        <member name="M:OSGi.NET.Listener.IServiceListener.ServiceChanged(OSGi.NET.Event.ServiceEventArgs)">
            <summary>
            服务状态变更
            </summary>
            <param name="serviceEvent">服务事件参数</param>
        </member>
        <member name="T:OSGi.NET.Provider.BundleAssemblyProvider">
            <summary>
            Bundle关联程序集提供程序
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleAssemblyProvider.AllBundleRefAssemblyDict">
            <summary>
            所有Bundle引用程序集
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleAssemblyProvider.AllShareRefAssemblyDict">
            <summary>
            通过反射加载的程序集
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.CurrentDomainAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            当前域加载程序集触发事件
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.AddAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            加入到程序集管理清单
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.RemoveAssembly(System.String)">
            <summary>
            从程序集管理清单移除
            </summary>
            <param name="assemblyName">程序集</param>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.AddShareAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            添加程序集至共享程序集管理清单
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.CheckHasShareLib(System.String)">
            <summary>
            检测程序集是否属于共享程序集
            </summary>
            <param name="assemblyFullName">程序集全名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.GetShareAssembly(System.String)">
            <summary>
            返回共享程序集
            </summary>
            <param name="assemblyFullName">程序集全名称</param>
            <returns>共享程序集</returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.CheckHasBundleLib(System.String)">
            <summary>
            检测程序集是否存在同名Bundle Lib程序集
            </summary>
            <param name="assemblyFullName">程序集全名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.GetBundleLibAssembly(System.String)">
            <summary>
            返回Bundle Lib程序集
            </summary>
            <param name="assemblyFullName">程序集全名称</param>
            <returns>Bundle Lib程序集</returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.GetGacAssembly(System.String)">
            <summary>
            返回GAC程序集
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleAssemblyProvider.GetManagedAssemblies">
            <summary>
            获取所有已管理的程序集
            </summary>
            <returns>管理的程序集</returns>
        </member>
        <member name="T:OSGi.NET.Provider.BundleConfigProvider">
            <summary>
            配置信息提供程序
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_CONFIG">
            <summary>
            OSGi配置文件名称常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_BUNDLE_STORAGE">
            <summary>
            Bundle存储目录常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_SHARELIB_STORAGE">
            <summary>
            SHARE共享程序集目录常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_ALL_TYPES_LOAD">
            <summary>
            依赖库或共享程序集是否全类型加载常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_SINGLE_RUNNING">
            <summary>
            是否独立运行
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_FCL_LIST">
            <summary>
            FCL程序清单常量(框架程序集清单)
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_SCL_LIST">
            <summary>
            SCL程序清单常量(共享程序集清单)
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_DEBUG_MODE">
            <summary>
            是否Debug模式
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_UNINSTALL_STORAGE">
            <summary>
            Bundle卸载目录常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_BUNDLE_DIRECTORY_NAME">
            <summary>
            Bundle缺省目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_SHARELIB_DIRECTORY_NAME">
            <summary>
            SHARE共享程序集缺省目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_BUNDLE_CONFIG">
            <summary>
            Bundle配置文件名称常量
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_UNINSTALL_DIRECTORY_NAME">
            <summary>
            Bundle卸载目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_ALLTYPES_LOAD">
            <summary>
            对于依赖库或共享程序集是否全类型加载
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_SINGLERUNNING">
            <summary>
            是否独立运行
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.OSGi_NET_IS_DEBUG_MODE">
            <summary>
            是否是Debug模式，差异主要在加载DLL方式上，Debug模式只是通过反射加载，不能做到
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.FrameworkConfiguration">
            <summary>
            框架配置信息
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.BundlesConfiguration">
            <summary>
            Bundles配置信息
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.StartLevel">
            <summary>
            启动级别
            </summary>
        </member>
        <member name="F:OSGi.NET.Provider.BundleConfigProvider.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.LoadFrameworkConfig">
            <summary>
            读取框架配置
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.LoadBundlesConfig(System.String)">
            <summary>
            读取Bundle配置
            </summary>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.ReadBundleConfig(System.String)">
            <summary>
            读取指定目录的Bundle配置信息
            </summary>
            <param name="bundlePath"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.SyncBundleConfig(System.String,System.Xml.XmlNode)">
            <summary>
            同步Bundle的配置信息
            </summary>
            <param name="bundleKey"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.RemoveBundleConfig(System.String)">
            <summary>
            移除指定Key的Bundle配置信息
            </summary>
            <param name="bundleKey"></param>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.CheckDllInWhiteList(System.String)">
            <summary>
            检测引用程序集是否属于Dll白名单
            </summary>
            <param name="dllName"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetConfigRootShareDll">
            <summary>
            返回根目录的共享程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundlesDirectory">
            <summary>
            获取模块存储目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetShareLibsDirectory">
            <summary>
            获取共享库目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundlesUninstallDirectory">
            <summary>
            获取模块卸载目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundleConfigAssemblyName(System.Xml.XmlNode)">
            <summary>
            返回Bundle配置的程序集名称
            </summary>
            <param name="xmlNode">模块配置节点</param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundleConfigStartLevel(System.Xml.XmlNode)">
            <summary>
            返回Bundle配置的启动级别
            </summary>
            <param name="xmlNode">模块配置节点</param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundleConfigExtensionPoints(System.Xml.XmlNode)">
            <summary>
            根据模块配置节点返回扩展点列表
            </summary>
            <param name="xmlNode">模块配置节点</param>
            <returns>扩展点列表</returns>
        </member>
        <member name="M:OSGi.NET.Provider.BundleConfigProvider.GetBundleConfigExtensionDatas(System.Xml.XmlNode)">
            <summary>
            根据模块配置节点返回扩展数据字典
            </summary>
            <param name="xmlNode">模块配置节点</param>
            <returns>扩展数据字典</returns>
        </member>
        <member name="T:OSGi.NET.Service.IServiceReference">
            <summary>
            服务引用，指向服务的引用，它们并不是真正的服务对象
            </summary>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetBundle">
            <summary>
            返回公布服务的模块
            </summary>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetProperty(System.String)">
            <summary>
            获取服务属性值
            </summary>
            <param name="key">属性Key</param>
            <returns>属性值</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetPropertyKeys">
            <summary>
            获取服务属性Key数组
            </summary>
            <returns>Key数组</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置服务属性
            </summary>
            <param name="propertyDictionary">服务属性字典</param>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetService">
            <summary>
            获取服务实例
            </summary>
            <returns>服务实例</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetSercieContracts">
            <summary>
            获取服务约束数组
            </summary>
            <returns>约束数组</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceReference.GetUsingBundles">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <returns>Bundle模块列表</returns>
        </member>
        <member name="T:OSGi.NET.Service.IServiceRegistration">
            <summary>
            服务注册信息，用于更新服务属性，反注册服务
            </summary>
        </member>
        <member name="M:OSGi.NET.Service.IServiceRegistration.GetReference">
            <summary>
            获取服务引用
            </summary>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Service.IServiceRegistration.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置服务属性
            </summary>
            <param name="properties">服务属性字典</param>
        </member>
        <member name="M:OSGi.NET.Service.IServiceRegistration.Unregister">
            <summary>
            取消注册公开的服务对象
            </summary>
        </member>
        <member name="T:OSGi.NET.Service.ServiceReference">
            <summary>
            服务引用，指向服务的引用，它们并不是真正的服务对象
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceReference.service">
            <summary>
            服务对象
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceReference.contracts">
            <summary>
            服务约束数组
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceReference.bundleContext">
            <summary>
            暴露服务的Bundle上下文
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceReference.properties">
            <summary>
            服务属性
            </summary>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.#ctor(OSGi.NET.Core.IBundleContext,System.String[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>
            服务引用
            </summary>
            <param name="bundleContext">暴露服务的Bundle上下文</param>
            <param name="contracts">服务约束数组</param>
            <param name="properties">服务属性</param>
            <param name="service">服务对象</param>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetBundle">
            <summary>
            返回公布服务的模块
            </summary>
            <returns>Bundle模块</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetProperty(System.String)">
            <summary>
            获取服务属性值
            </summary>
            <param name="key">属性Key</param>
            <returns>属性值</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetPropertyKeys">
            <summary>
            获取服务属性Key数组
            </summary>
            <returns>Key数组</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置服务属性
            </summary>
            <param name="propertyDictionary">服务属性字典</param>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetService">
            <summary>
            获取服务实例
            </summary>
            <returns>服务实例</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetSercieContracts">
            <summary>
            获取服务约束数组
            </summary>
            <returns>约束数组</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.GetUsingBundles">
            <summary>
            获取正在使用指定服务的所有Bundle模块
            </summary>
            <returns>Bundle模块列表</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceReference.CompareTo(System.Object)">
            <summary>
            对比服务是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Service.ServiceRegistration">
            <summary>
            服务注册信息，用于更新服务属性，反注册服务
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceRegistration.framework">
            <summary>
            内核框架
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceRegistration.bundleContext">
            <summary>
            暴露服务的Bundle上下文
            </summary>
        </member>
        <member name="F:OSGi.NET.Service.ServiceRegistration.reference">
            <summary>
            服务引用
            </summary>
        </member>
        <member name="M:OSGi.NET.Service.ServiceRegistration.#ctor(OSGi.NET.Core.Root.IFramework,OSGi.NET.Core.IBundleContext,OSGi.NET.Service.ServiceReference)">
            <summary>
            服务注册信息
            </summary>
            <param name="framework">内核框架</param>
            <param name="bundleContext">暴露服务的Bundle上下文</param>
            <param name="reference">服务引用</param>
        </member>
        <member name="M:OSGi.NET.Service.ServiceRegistration.GetReference">
            <summary>
            获取服务引用
            </summary>
            <returns>服务引用</returns>
        </member>
        <member name="M:OSGi.NET.Service.ServiceRegistration.SetProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置服务属性
            </summary>
            <param name="properties">服务属性字典</param>
        </member>
        <member name="M:OSGi.NET.Service.ServiceRegistration.Unregister">
            <summary>
            取消注册公开的服务对象
            </summary>
        </member>
        <member name="T:OSGi.NET.Utils.AssemblyResolver">
            <summary>
            跨域程序集分析器
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.AssemblyResolver.assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.AssemblyResolver.bundleLib">
            <summary>
            BundleLib目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.AssemblyResolver.shareLib">
            <summary>
            ShareLib目录
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.AssemblyResolver.attributeDataList">
            <summary>
            程序集描述特性信息
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.AssemblyResolver.BUNDLE_MANIFEST_REQUIRED_BUNDLE_VERSION">
            <summary>
            程序集版本关键字
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.Init(System.Byte[],System.String,System.String)">
            <summary>
            初始化
            </summary>
            <param name="assemblyByteArray">程序集二进制</param>
            <param name="bundleLibPath">BundleLib目录</param>
            <param name="shareLibPath">ShareLib目录</param>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.CurrentDomainOnReflectionOnlyAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            当前域关联程序集发现逻辑
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.Init(System.Reflection.Assembly)">
            <summary>
            初始化
            </summary>
            <param name="assemblyObj">程序集实例</param>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetAssemblyFullName">
            <summary>
            获取程序集全名
            </summary>
            <returns>程序集全名</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetAssemblyName">
            <summary>
            获取程序集名称
            </summary>
            <returns>程序集名称</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetVersion">
            <summary>
            获取程序集版本
            </summary>
            <returns>程序集版本</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetAssemblyTitle">
            <summary>
            获取程序集标题
            </summary>
            <returns>程序集标题</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetVendor">
            <summary>
            获取程序集厂商信息
            </summary>
            <returns>程序集厂商信息</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetCustomAttributeData(System.Type)">
            <summary>
            获取程序集自定义特性数据
            </summary>
            <param name="type">关键字</param>
            <returns>自定义特性数据</returns>
        </member>
        <member name="M:OSGi.NET.Utils.AssemblyResolver.GetAssemblyRequiredAssembly">
            <summary>
            获取程序集依赖程序集
            </summary>
            <returns>依赖程序集信息</returns>
        </member>
        <member name="T:OSGi.NET.Utils.BundleUtils">
            <summary>
            Bundle工具对象
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.BundleUtils.IsAssemblyBelongsFcl(System.String)">
            <summary>
            程序集是否属于Framework class dll
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns>是否属于</returns>
        </member>
        <member name="M:OSGi.NET.Utils.BundleUtils.RemoveAssemblyStrongName(Mono.Cecil.AssemblyNameReference)">
            <summary>
            去掉强签名
            </summary>
            <param name="reference">程序集引用</param>
        </member>
        <member name="M:OSGi.NET.Utils.BundleUtils.ExtractBundleFile(System.String,System.String)">
            <summary>
            解压文件
            </summary>
            <param name="outFolder">输出目录</param>
            <param name="zipFile">压缩包文件路径</param>
        </member>
        <member name="T:OSGi.NET.Utils.CustomAssemblyResolver">
            <summary>
            
            </summary>
        </member>
        <member name="T:OSGi.NET.Utils.CustomAssemblyResolver.ResolveAssemblyDefinitionDelegate">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="F:OSGi.NET.Utils.CustomAssemblyResolver.resolveAssemblyDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.CustomAssemblyResolver.#ctor(OSGi.NET.Utils.CustomAssemblyResolver.ResolveAssemblyDefinitionDelegate)">
            <summary>
            
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.CustomAssemblyResolver.Resolve(Mono.Cecil.AssemblyNameReference)">
            <summary>
            
            </summary>
            <param name="assemblyNameReference"></param>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Utils.MonoAssemblyResolver">
            <summary>
            
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.MonoAssemblyResolver.assembly">
            <summary>
            程序集定义
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.MonoAssemblyResolver.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="assemblyFile">程序集文件</param>
        </member>
        <member name="T:OSGi.NET.Utils.MonoReflector">
            <summary>
            Mono反射器
            </summary>
        </member>
        <member name="M:OSGi.NET.Utils.MonoReflector.LoadAssembly(System.String)">
            <summary>
            获取程序集反射器
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:OSGi.NET.Utils.MonoAssemblyReflector">
            <summary>
            程序集反射器
            </summary>
        </member>
        <member name="T:OSGi.NET.Utils.MonoTypeReflector">
            <summary>
            类型反射器
            </summary>
        </member>
        <member name="T:OSGi.NET.Utils.MonoAttributeReflector">
            <summary>
            程序集特性反射器
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.MonoAttributeReflector._attribute">
            <summary>
            自定义特性
            </summary>
        </member>
        <member name="F:OSGi.NET.Utils.MonoAttributeReflector._values">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
